#include <pebble.h>

static Window *window;
static TextLayer *text_layer;
static AppTimer *timer;


const VibePattern custom_pattern = {
  .durations = (uint32_t []) {100},
  .num_segments = 1
};


static void timer_callback(void *data) {
vibes_enqueue_custom_pattern(custom_pattern);
  text_layer_set_text(text_layer, "Timer happened!");
}


int a;
char b;
int c;
void update_ui_from_accel(void) {
  AccelData data;

b = 10;

 accel_service_peek(&data);
 text_layer_set_text(text_layer, ("%c", b));
}



static void select_click_handler(ClickRecognizerRef recognizer, void *context) {


  text_layer_set_text(text_layer, "Select");
vibes_enqueue_custom_pattern(custom_pattern);
 timer = app_timer_register(1500 /* milliseconds */, timer_callback, NULL);
  // A timer can be canceled with `app_timer_cancel()`
}

static void up_click_handler(ClickRecognizerRef recognizer, void *context) {
  text_layer_set_text(text_layer, "Up");
}

static void down_click_handler(ClickRecognizerRef recognizer, void *context) {
  text_layer_set_text(text_layer, "Down");
}

static void click_config_provider(void *context) {
  window_single_click_subscribe(BUTTON_ID_SELECT, select_click_handler);
  window_single_click_subscribe(BUTTON_ID_UP, up_click_handler);
  window_single_click_subscribe(BUTTON_ID_DOWN, down_click_handler);
}

static void window_load(Window *window) {
  Layer *window_layer = window_get_root_layer(window);
  GRect bounds = layer_get_bounds(window_layer);

  text_layer = text_layer_create((GRect) { .origin = { 0, 72 }, .size = { bounds.size.w, 20 } });
  text_layer_set_text(text_layer, "Welcome to Make Me Bartender, Press select for ounce options.");
  text_layer_set_text_alignment(text_layer, GTextAlignmentCenter);
  layer_add_child(window_layer, text_layer_get_layer(text_layer));
}

static void window_unload(Window *window) {
  text_layer_destroy(text_layer);
}

static void init(void) {
  window = window_create();
  window_set_click_config_provider(window, click_config_provider);
  window_set_window_handlers(window, (WindowHandlers) {
    .load = window_load,
    .unload = window_unload,
  });
  const bool animated = true;
  window_stack_push(window, animated);
accel_data_service_subscribe(0, NULL);
}

static void deinit(void) {
  window_destroy(window);
 accel_data_service_unsubscribe();

}

int main(void) {
  init();

  APP_LOG(APP_LOG_LEVEL_DEBUG, "Done initializing, pushed window: %p", window);




  app_event_loop();
  deinit();
}
